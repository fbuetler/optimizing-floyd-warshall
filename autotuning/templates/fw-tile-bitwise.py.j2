#include <immintrin.h>
#include <math.h>

#include "fw.h"

// iterative FW algorithm (FWI)
{{ "// tiling factors Ui and Uj are set to {} and {}, respectively".format(unroll_i,unroll_j) }}
int FWI(char *A, char *B, char *C, int N, int L1)
{
    // NOTE 1: We assume Ui and Uj divide N for simplicity
    // NOTE 2: If generating vector code, we require that Uj is divisible by 4
    for (int k = 0; k < L1; k++)
    {
        for (int i = 0; i < L1 - {{ unroll_i - 1 }}; i += {{ unroll_i }})
        {
            {% for u_i in range(unroll_i) -%}
            {% if vector -%}
            {{ "__m256i a_{}_k = _mm256_broadcast_sd(&A[(i + {}) * N + k]);".format(u_i, u_i) }}
            {% else -%}
            {{ "char a_{}_k = A[(i + {}) * N + k];".format(u_i, u_i) }}
            {% endif -%}
            {% endfor -%}
            for (int j = 0; j < L1 - {{ unroll_j - 1 }}; j += {{ unroll_j }})
            {
                // load
                {% for u_i in range(unroll_i) -%}
                {% if vector -%}
                {% for u_j in range(0, unroll_j, 4) -%}
                {{ "__m256i c_{}_{} = _mm256_load_pd(&C[(i + {}) * N + j + {}]);".format(u_i, u_j, u_i, u_j) }}
                {% endfor -%}
                {% else -%}
                {% for u_j in range(unroll_j) -%}
                {{ "char c_{}_{} = C[(i + {}) * N + j + {}];".format(u_i, u_j, u_i, u_j) }}
                {% endfor -%}
                {% endif -%}
                {% endfor %}

                {% if vector -%}
                {% for u_j in range(0, unroll_j, 4) -%}
                {{ "__m256i b_k_{} = _mm256_load_pd(&B[k * N + j + {}]);".format(u_j, u_j) }}
                {% endfor -%}
                {% else -%}
                {% for u_j in range(unroll_j) -%}
                {{ "char b_k_{} = B[k * N + j + {}];".format(u_j, u_j) }}
                {% endfor -%}
                {% endif %}

                // op 1
                {% for u_i in range(unroll_i) -%}
                {% if vector -%}
                {% for u_j in range(0, unroll_j, 4) -%}
                {{ "__m256i res_{}_{} = V{}(a_{}_k, b_k_{});".format(u_i, u_j, inner_op, u_i, u_j) }}
                {% endfor -%}
                {% else -%}
                {% for u_j in range(unroll_j) -%}
                {{ "char res_{}_{} = {}(a_{}_k, b_k_{});".format(u_i, u_j, inner_op, u_i, u_j) }}
                {% endfor -%}
                {% endif -%}
                {% endfor %}

                // op 2
                {% for u_i in range(unroll_i) -%}
                {% if vector -%}
                {% for u_j in range(0, unroll_j, 4) -%}
                {{ "c_{}_{} = V{}(c_{}_{}, res_{}_{});".format(u_i, u_j, outer_op, u_i, u_j, u_i, u_j) }}
                {% endfor -%}
                {% else -%}
                {% for u_j in range(unroll_j) -%}
                {{ "c_{}_{} = {}(c_{}_{}, res_{}_{});".format(u_i, u_j, outer_op, u_i, u_j, u_i, u_j) }}
                {% endfor -%}
                {% endif -%}
                {% endfor %}

                // store
                {% for u_i in range(unroll_i) -%}
                {% if vector -%}
                {% for u_j in range(0, unroll_j, 4) -%}
                {{ "_mm256_store_pd(&C[(i + {}) * N + j + {}], c_{}_{});".format(u_i, u_j, u_i, u_j) }}
                {% endfor -%}
                {% else -%}
                {% for u_j in range(unroll_j) -%}
                {{ "C[(i + {}) * N + j + {}] = c_{}_{};".format(u_i, u_j, u_i, u_j) }}
                {% endfor -%}
                {% endif -%}
                {% endfor %}
            }
        }
    }
    return 0;
}

// FWI for 3 distinct matrices (FWIabc)
{{ "// tiling factors Uk', Ui' and Uj' are set to {}, {} and {}, respectively".format(unroll_kk, unroll_ii, unroll_jj) }}
int FWIabc(char *A, char *B, char *C, int N, int L1)
{
    // NOTE: We assume Uk, Ui and Uj divide N for simplicity
    for (int i = 0; i < L1 - {{ unroll_ii - 1 }}; i += {{ unroll_ii }})
    {
        for (int j = 0; j < L1 - {{ unroll_jj- 1 }}; j += {{ unroll_jj }})
        {
            for (int k = 0; k < L1 - {{ unroll_kk - 1 }}; k += {{ unroll_kk }})
            {
                // load
                {% for u_i in range(unroll_ii) -%}
                {% for u_k in range(unroll_kk) -%}
                {% if vector -%}
                {{ "__m256i a_{}_{} = _mm256_broadcast_sd(&A[(i + {}) * N + (k + {})]);".format(u_i, u_k, u_i, u_k) }}
                {% else -%}
                {{ "char a_{}_{} = A[(i + {}) * N + (k + {})];".format(u_i, u_k, u_i, u_k) }}
                {% endif -%}
                {% endfor -%}
                {% endfor %}

                {% for u_k in range(unroll_kk) -%}
                {% if vector -%}
                {% for u_j in range(0, unroll_jj, 4) -%}
                {{ "__m256i b_{}_{} = _mm256_load_pd(&B[(k + {}) * N + (j + {})]);".format(u_k, u_j, u_k, u_j) }}
                {% endfor -%}
                {% else -%}
                {% for u_j in range(unroll_jj) -%}
                {{ "char b_{}_{} = B[(k + {}) * N + (j + {})];".format(u_k, u_j, u_k, u_j) }}
                {% endfor -%}
                {% endif %}
                {%- endfor %}

                {% for u_i in range(unroll_ii) -%}
                {% if vector -%}
                {% for u_j in range(0, unroll_jj, 4) -%}
                {{ "__m256i c_{}_{} = _mm256_load_pd(&C[(i + {}) * N + j + {}]);".format(u_i, u_j, u_i, u_j) }}
                {% endfor -%}
                {% else -%}
                {% for u_j in range(unroll_jj) -%}
                {{ "char c_{}_{} = C[(i + {}) * N + j + {}];".format(u_i, u_j, u_i, u_j) }}
                {% endfor -%}
                {% endif -%}
                {% endfor %}

                {% for u_k in range(unroll_kk) -%}
                {{ "// for k + {}".format(u_k) }}
                {% for u_i in range(unroll_ii) -%}
                {% if vector -%}
                {% for u_j in range(0, unroll_jj, 4) -%}
                {% if u_k == 0 %}__m256i {% endif -%}
                {{ "res_{}_{} = V{}(a_{}_{}, b_{}_{});".format(u_i, u_j, inner_op, u_i, u_k, u_k, u_j) }}
                {% endfor -%}
                {% else -%}
                {% for u_j in range(unroll_jj) -%}
                {% if u_k == 0 %}char {% endif -%}
                {{ "res_{}_{} = {}(a_{}_{}, b_{}_{});".format(u_i, u_j, inner_op, u_i, u_k, u_k, u_j) }}
                {% endfor -%}
                {% endif -%}
                {% endfor %}

                {% for u_i in range(unroll_ii) -%}
                {% if vector -%}
                {% for u_j in range(0, unroll_jj, 4) -%}
                {{ "c_{}_{} = V{}(c_{}_{}, res_{}_{});".format(u_i, u_j, outer_op, u_i, u_j, u_i, u_j) }}
                {% endfor -%}
                {% else -%}
                {% for u_j in range(unroll_jj) -%}
                {{ "c_{}_{} = {}(c_{}_{}, res_{}_{});".format(u_i, u_j, outer_op, u_i, u_j, u_i, u_j) }}
                {% endfor -%}
                {% endif -%}
                {% endfor %}
                {% endfor -%}

                // store
                {% for u_i in range(unroll_ii) -%}
                {% if vector -%}
                {% for u_j in range(0, unroll_jj, 4) -%}
                {{ "_mm256_store_pd(&C[(i + {}) * N + j + {}], c_{}_{});".format(u_i, u_j, u_i, u_j) }}
                {% endfor -%}
                {% else -%}
                {% for u_j in range(unroll_jj) -%}
                {{ "C[(i + {}) * N + j + {}] = c_{}_{};".format(u_i, u_j, u_i, u_j) }}
                {% endfor -%}
                {% endif -%}
                {% endfor %}
            }
        }
    }
    return 0;
}

// tiled FW algorithm (FWT)
// tile size: L1 x L1
int FWT(char *A, char *B, char *C, int N, int L1)
{
    // NOTE: We assume L1 divides N for simplicity
    // Notation: A_ij is the L1 x L1 submatrix (i,j) of A
    int M = N / L1;
    for (int k = 0; k < M; k++)
    {
        // phase 1: update all diagonal tiles
        // FWI(A_kk, B_kk, C_kk, L1)
        FWI(SUBM(A, k, k, N, L1, L1), SUBM(B, k, k, N, L1, L1), SUBM(C, k, k, N, L1, L1), N, L1);

        // phase 2: update all tiles in row k
        for (int j = 0; j < M; j++)
        {
            if (j != k)
            {
                // FWI(A_kk,B_kj,C_kj, L1)
                FWI(SUBM(A, k, k, N, L1, L1), SUBM(B, k, j, N, L1, L1), SUBM(C, k, j, N, L1, L1), N, L1);
            }
        }

        // phase 3: update all tiles in column k
        for (int i = 0; i < M; i++)
        {
            if (i != k)
            {
                // FWI(A_ik, B_kk, C_ik, L1)
                FWI(SUBM(A, i, k, N, L1, L1), SUBM(B, k, k, N, L1, L1), SUBM(C, i, k, N, L1, L1), N, L1);
            }
        }

        // phase 4: update all remaining tiles
        for (int i = 0; i < M; i++)
        {
            if (i != k)
            {
                for (int j = 0; j < M; j++)
                {
                    if (j != k)
                    {
                        // FWIabc(A_ik,B_kj,C_ij, L1)
                        FWIabc(SUBM(A, i, k, N, L1, L1), SUBM(B, k, j, N, L1, L1), SUBM(C, i, j, N, L1, L1), N, L1);
                    }
                }
            }
        }
    }
    return 0;
}

/*
// tiled FW algorithm (FWT)
// tile size: L1 x L1
function FWT(A, B, C, N, L1)
    // A_ij: L1 x L1 submatrix (i,j) of A, i.e., A[(i-1)*L1+1:i*L1][(j-1)*L1+1:j*L1];
    M = N/L1;
    for k=1:1:M
        // phase 1
        FWI(A_kk, B_kk, C_kk, L1);
        // phase 2
        for j=1:1:M, j!=k
            FWI(A_kk,B_kj,C_kj, L1);
        // phase 3
        for i=1:1:M, i!=k
            FWI(A_ik, B_kk, C_ik, L1);
        // phase 4
        for i=1:1:M, i!=k
            for j=1:1:M, j!=k
                FWIabc(A_ik,B_kj,C_ij, L1);

*/
int floydWarshall(char *C, int N)
{
    // tile size is set to 8
    return FWT(C, C, C, N, {{ L1 }});
}