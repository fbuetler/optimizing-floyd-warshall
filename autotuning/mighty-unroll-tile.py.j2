#include "{{ algorithm }}.h"

int floydWarshall({{ datatype }} *C, int N) {
    if (N % {{ tilesizei }} != 0 || N % {{ tilesizej }} != 0) {
        return 1;
    }

    {% if algorithm == "tc" -%}
    int bytes_per_row = ceil({{ tilesizej }} / 8.0);
    int inner_limit = bytes_per_row;
    int row_size = bytes_per_row;
    {% else -%}
    int inner_limit = {{ tilesizej }};
    int row_size = N; 
    {%- endif %}

    for (int k = 0; k < N; k++) {

        {% if algorithm == "tc" %}
        char index_mask = 1 << (k % 8);
        {% endif %}

        for (int ii = 0; ii < N; ii += {{ tilesizei }}) {
            for (int jj = 0; jj < N; jj += {{ tilesizej }}) {
                // tile
                int i = ii;
                for (; i - ii < {{ tilesizei }} - {{ unroll_i - 1 }}; i += {{ unroll_i }}) {
                    {% for u_i in range(unroll_i) -%}
                    {% if algorithm == "tc" -%}
                    {{ "{} ci{}k = C[(i + {}) * row_size + k / 8] & index_mask ? 0xff : 0x00;".format(datatype, u_i, u_i) }} 
                    {% else -%}
                    {{ "{} ci{}k = C[(i + {}) * row_size + k];".format(datatype, u_i, u_i) }}
                    {% endif -%}
                    {% endfor -%}

                    int j = jj;
                    for (; j - jj < inner_limit - {{ unroll_j - 1 }}; j += {{ unroll_j }}) {
                        // load
                        {% for u_i in range(unroll_i) -%}
                        {% for u_j in range(unroll_j) -%}
                        {{ "{} ci{}j{} = C[(i + {}) * row_size + j + {}];".format(datatype, u_i, u_j, u_i, u_j) }}
                        {% endfor -%}
                        {% endfor %}

                        {% for u_j in range(unroll_j) -%}
                        {{ "{} ckj{} = C[k * row_size + j + {}];".format(datatype, u_j, u_j) }}
                        {% endfor %}

                        // compute 1
                        {% for u_i in range(unroll_i) -%}
                        {% for u_j in range(unroll_j) -%}
                        {{ "{} intermediate{}_{} = {}(ci{}k, ckj{});".format(datatype, u_i, u_j, inner_op, u_i, u_j) }}
                        {% endfor -%}
                        {% endfor %}

                        // compute 2
                        {% for u_i in range(unroll_i) -%}
                        {% for u_j in range(unroll_j) -%}
                        {{ "{} res{}_{} = {}(ci{}j{}, intermediate{}_{});".format(datatype, u_i, u_j, outer_op, u_i, u_j, u_i, u_j) }}
                        {% endfor -%}
                        {% endfor %}

                        // store
                        {% for u_i in range(unroll_i) -%}
                        {% for u_j in range(unroll_j) -%}
                        {{ "C[(i + {}) * row_size + (j + {})] = res{}_{};".format(u_i, u_j, u_i, u_j) }}
                        {% endfor -%}
                        {% endfor %}
                    }

                    // rest of j
                    for (; j - jj < inner_limit; j++) {
                        {% for u_i in range(unroll_i) -%}
                        {{ "C[(i + {}) * row_size + j] = {}(C[(i + {}) * row_size + j], {}(ci{}k, C[k * row_size + j]));".format(u_i, outer_op, u_i, inner_op, u_i) }}
                        {% endfor %}
                    }
                }

                // rest of i
                for (; i - ii < {{ tilesizei }}; i++) {
                    {% if algorithm == "tc" -%}
                    {{ datatype }} cik = C[i * row_size + k / 8] & index_mask ? 0xff : 0x00;
                    {% else -%}
                    {{ datatype }} cik = C[i * row_size + k];
                    {%- endif %}
            
                    int j = jj;
                    for (; j - jj < inner_limit - {{ unroll_j - 1 }}; j += {{ unroll_j }}) {
                        // load
                        {% for u_j in range(unroll_j) -%}
                        {{ "{} cij{} = C[i * row_size + j + {}];".format(datatype, u_j, u_j) }}
                        {% endfor %}

                        {% for u_j in range(unroll_j) -%}
                        {{ "{} ckj{} = C[k * row_size + j + {}];".format(datatype, u_j, u_j) }}
                        {% endfor %}

                        // compute 1
                        {% for u_j in range(unroll_j) -%}
                        {{ "{} intermediate{} = {}(cik, ckj{});".format(datatype, u_j, inner_op, u_j) }}
                        {% endfor %}

                        // compute 2
                        {% for u_j in range(unroll_j) -%}
                        {{ "{} res{} = {}(cij{}, intermediate{});".format(datatype, u_j, outer_op, u_j, u_j) }}
                        {% endfor %}

                        // store
                        {% for u_j in range(unroll_j) -%}
                        {{ "C[i * row_size + j + {}] = res{};".format(u_j, u_j) }}
                        {% endfor %}
                    }

                    // rest of j
                    for (; j - jj < inner_limit; j++) {
                        C[i * row_size + j] = {{ outer_op }}(C[i * row_size + j], {{ inner_op }}(cik, C[k * row_size + j]));
                    }
                }
            }
        }
    }
    return 0;
}
